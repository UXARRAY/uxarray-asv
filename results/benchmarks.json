{
    "face_bounds.FaceBounds.peakmem_face_bounds": {
        "code": "class FaceBounds:\n    def peakmem_face_bounds(self, grid_path):\n        \"\"\"Peak memory usage obtain ``Grid.face_bounds.\"\"\"\n        face_bounds = self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "name": "face_bounds.FaceBounds.peakmem_face_bounds",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "264d64f2871bf9cf43d671ee77406801857632dd9da3cdd4302188c9f73740e4"
    },
    "face_bounds.FaceBounds.time_face_bounds": {
        "code": "class FaceBounds:\n    def time_face_bounds(self, grid_path):\n        \"\"\"Time to obtain ``Grid.face_bounds``\"\"\"\n        self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "face_bounds.FaceBounds.time_face_bounds",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "59ab137a0d4a031edd79f08b2454bef8eeb9cd8ef799f72e5272f249063ec61d",
        "warmup_time": -1
    },
    "import.Imports.timeraw_import_uxarray": {
        "code": "class Imports:\n    def timeraw_import_uxarray(self):\n        return \"import uxarray\"",
        "min_run_count": 2,
        "name": "import.Imports.timeraw_import_uxarray",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "05d7358a621ba8469294e43469945f02cd99857a9d23b35cc2a37d5c90deaf20",
        "warmup_time": -1
    },
    "mpas_ocean.CheckNorm.time_check_norm": {
        "code": "class CheckNorm:\n    def time_check_norm(self, resolution):\n        from uxarray.grid.validation import _check_normalization\n        _check_normalization(self.uxgrid)\n\n    def setup(self, resolution):\n        self.uxgrid = ux.open_grid(file_path_dict[resolution][0])",
        "min_run_count": 2,
        "name": "mpas_ocean.CheckNorm.time_check_norm",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "80690bc549b4d4d30b9190960e39e99a70d987dd80b2fe9655f568b292f50f7c",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity": {
        "code": "class ConnectivityConstruction:\n    def time_face_face_connectivity(self, resolution):\n        ux.grid.connectivity._populate_face_face_connectivity(self.uxds.uxgrid)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d17d64682605c89f3a4a41dacad12310025c7e894bde080abaa54192989d3bfe",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face": {
        "code": "class ConnectivityConstruction:\n    def time_n_nodes_per_face(self, resolution):\n        self.uxds.uxgrid.n_nodes_per_face\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "eb11f7750b605d9f6ea6467f4d970fc820bcab30a71e4ebb06b2bae37172a76f",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructFaceLatLon.time_cartesian_averaging": {
        "code": "class ConstructFaceLatLon:\n    def time_cartesian_averaging(self, resolution):\n        self.uxgrid.construct_face_centers(method='cartesian average')\n\nclass GridBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxgrid = ux.open_grid(file_path_dict[resolution][0])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructFaceLatLon.time_cartesian_averaging",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fcc73b823334b3777b52a18124001965168d8ad70517cfb9f6f7032be10d6caa",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructFaceLatLon.time_welzl": {
        "code": "class ConstructFaceLatLon:\n    def time_welzl(self, resolution):\n        self.uxgrid.construct_face_centers(method='welzl')\n\nclass GridBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxgrid = ux.open_grid(file_path_dict[resolution][0])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructFaceLatLon.time_welzl",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1cd1e29519b9368e0e4b542fc2ea0f0a08750e8f7fbd1b10b6f443af6024dae2",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_ball_tree": {
        "code": "class ConstructTreeStructures:\n    def time_ball_tree(self, resolution):\n        self.uxds.uxgrid.get_ball_tree()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_ball_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e7a6195397c4d1d166a7853510f074734c6066eeb2f5d8adb15911a8b29fc6eb",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_kd_tree": {
        "code": "class ConstructTreeStructures:\n    def time_kd_tree(self, resolution):\n        self.uxds.uxgrid.get_kd_tree()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_kd_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "aa75da38392d38d48c16e798d32c8fc13c405fba9bfd70f066899abe430b212e",
        "warmup_time": -1
    },
    "mpas_ocean.CrossSections.time_const_lat": {
        "code": "class CrossSections:\n    def time_const_lat(self, resolution, lat_step):\n        for lat in self.lats:\n            self.uxgrid.cross_section.constant_latitude(lat)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.CrossSections.time_const_lat",
        "number": 0,
        "param_names": [
            "resolution",
            "n_lat"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "1",
                "2",
                "4",
                "8"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "07305dfff61c3c0f52d276b43acf8686aeaa164ad147cd7c6c969c48dd0ff507",
        "warmup_time": -1
    },
    "mpas_ocean.CrossSections.time_constant_lat_fast": {
        "code": "class CrossSections:\n    def time_constant_lat_fast(self, resolution, n_lat):\n        for lat in np.linspace(-89, 89, n_lat):\n            self.uxds.uxgrid.constant_latitude_cross_section(lat, method='fast')\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.CrossSections.time_constant_lat_fast",
        "number": 0,
        "param_names": [
            "resolution",
            "n_lat"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "1",
                "2",
                "4",
                "8"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "38d02b4d0b3526585869dee7be1ddaad0fc884e75b1ea2a09be43221571635e4",
        "warmup_time": -1
    },
    "mpas_ocean.DualMesh.time_dual_mesh_construction": {
        "code": "class DualMesh:\n    def time_dual_mesh_construction(self, resolution):\n        self.uxds.uxgrid.get_dual()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.DualMesh.time_dual_mesh_construction",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4c77f40d6a63d0a30f57ff8da1c2be401d134379c52782c28349795153ff6ea8",
        "warmup_time": -1
    },
    "mpas_ocean.GeoDataFrame.time_to_geodataframe": {
        "code": "class GeoDataFrame:\n    def time_to_geodataframe(self, resolution, exclude_antimeridian):\n        self.uxds[data_var].to_geodataframe(exclude_antimeridian=exclude_antimeridian)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.GeoDataFrame.time_to_geodataframe",
        "number": 0,
        "param_names": [
            "resolution",
            "exclude_antimeridian"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "True",
                "False"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fdda72e8afd45608569fb3343f6f067cf3716dba26532eb142be9223fc5d0b98",
        "warmup_time": -1
    },
    "mpas_ocean.Gradient.peakmem_gradient": {
        "code": "class Gradient:\n    def peakmem_gradient(self, resolution):\n        grad = self.uxds[data_var].gradient()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Gradient.peakmem_gradient",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "2c5704784f88210b00288651dbcee688318ff4ebf5674568a090a297c508c8ff"
    },
    "mpas_ocean.Gradient.time_gradient": {
        "code": "class Gradient:\n    def time_gradient(self, resolution):\n        self.uxds[data_var].gradient()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Gradient.time_gradient",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "19b8246a1b7f7cd52ec73d727dca3bb45b1952d4ef7644d2f13f7929bb16c0ad",
        "warmup_time": -1
    },
    "mpas_ocean.HoleEdgeIndices.time_construct_hole_edge_indices": {
        "code": "class HoleEdgeIndices:\n    def time_construct_hole_edge_indices(self, resolution):\n        ux.grid.geometry._construct_boundary_edge_indices(self.uxds.uxgrid.edge_face_connectivity)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.HoleEdgeIndices.time_construct_hole_edge_indices",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d62b0286adad1a9a588d51e34f7ddffc212888d935b53347df6f8e3ee58fe594",
        "warmup_time": -1
    },
    "mpas_ocean.Integrate.peakmem_integrate": {
        "code": "class Integrate:\n    def peakmem_integrate(self, resolution):\n        integral = self.uxds[data_var].integrate()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Integrate.peakmem_integrate",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "9627f636ac2c145feb90416484eb94c9b0fe421250ff0f8f4f89e526da8d2c9a"
    },
    "mpas_ocean.Integrate.time_integrate": {
        "code": "class Integrate:\n    def time_integrate(self, resolution):\n        self.uxds[data_var].integrate()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Integrate.time_integrate",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "180accc984e741ea109341e013c286885335fc9eb4fc4bbe072ef49006c717f9",
        "warmup_time": -1
    },
    "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection": {
        "code": "class MatplotlibConversion:\n    def time_dataarray_to_polycollection(self, resolution, periodic_elements):\n        self.uxds[data_var].to_polycollection()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection",
        "number": 0,
        "param_names": [
            "resolution",
            "periodic_elements"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "'include'",
                "'exclude'",
                "'split'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "743db07382b77e8f1686d62df074bdbc72cb59afc76016db59c510653208b8a1",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapDownsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "35146054f62256ab927954781012aad8a15b03eef90a4aece78bf2b7002c4853",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping": {
        "code": "class RemapDownsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3454ce734208221027c7080a56f1e679ae092a93516752a89474d75d7a705472",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapUpsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0836cc8c471952d8a557cf8d6c1d3c0677d0193d4ad961126f0bd34dab5dd9b9",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping": {
        "code": "class RemapUpsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "db94cc8878dce6417e0aa06f72be38042115986e62fe929389fb2b48d8c93582",
        "warmup_time": -1
    },
    "mpas_ocean.ZonalAverage.time_zonal_average": {
        "code": "class ZonalAverage:\n    def time_zonal_average(self, resolution):\n        lat_step = 10\n        self.uxds['bottomDepth'].zonal_mean(lat=(-45, 45, lat_step))\n\n    def setup(self, resolution, *args, **kwargs):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])\n        bounds = self.uxds.uxgrid.bounds",
        "min_run_count": 2,
        "name": "mpas_ocean.ZonalAverage.time_zonal_average",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "399e05af92e5521a0ffa0d4dec5457ac3260af213cb84941642768b705c03cd5",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.peakmem_open_dataset": {
        "code": "class QuadHexagon:\n    def peakmem_open_dataset(self):\n        \"\"\"Peak memory usage of a `UxDataset`\"\"\"\n        uxds = ux.open_dataset(grid_path, data_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_dataset",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ad0aeefdf056572ee11796d0103ffa9a88e7bf04c8f9c3725d6c2d890fa188f0"
    },
    "quad_hexagon.QuadHexagon.peakmem_open_grid": {
        "code": "class QuadHexagon:\n    def peakmem_open_grid(self):\n        \"\"\"Peak memory usage of a `Grid`\"\"\"\n        uxgrid = ux.open_grid(grid_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_grid",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0d8b965012ecb7916a2b6ca64acae11befae73b3890c5e1ed06f092e9cb0def0"
    },
    "quad_hexagon.QuadHexagon.time_open_dataset": {
        "code": "class QuadHexagon:\n    def time_open_dataset(self):\n        \"\"\"Time to open a `UxDataset`\"\"\"\n        ux.open_dataset(grid_path, data_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_dataset",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "04f0374471175756c99c2792d638ac40872fdbe2301368ec39fd096f4195fa9a",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.time_open_grid": {
        "code": "class QuadHexagon:\n    def time_open_grid(self):\n        \"\"\"Time to open a `Grid`\"\"\"\n        ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "23b984b5aa811d5e0d05013c8e071d46285a6908fa146376bc3ca71591fa251a",
        "warmup_time": -1
    },
    "version": 2
}