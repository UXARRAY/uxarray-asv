{
    "face_bounds.FaceBounds.peakmem_face_bounds": {
        "code": "class FaceBounds:\n    def peakmem_face_bounds(self, grid_path):\n        \"\"\"Peak memory usage obtain ``Grid.face_bounds.\"\"\"\n        face_bounds = self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "name": "face_bounds.FaceBounds.peakmem_face_bounds",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "264d64f2871bf9cf43d671ee77406801857632dd9da3cdd4302188c9f73740e4"
    },
    "face_bounds.FaceBounds.time_face_bounds": {
        "code": "class FaceBounds:\n    def time_face_bounds(self, grid_path):\n        \"\"\"Time to obtain ``Grid.face_bounds``\"\"\"\n        self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "face_bounds.FaceBounds.time_face_bounds",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "59ab137a0d4a031edd79f08b2454bef8eeb9cd8ef799f72e5272f249063ec61d",
        "warmup_time": -1
    },
    "import.Imports.timeraw_import_uxarray": {
        "code": "class Imports:\n    def timeraw_import_uxarray(self):\n        return \"import uxarray\"",
        "min_run_count": 2,
        "name": "import.Imports.timeraw_import_uxarray",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "05d7358a621ba8469294e43469945f02cd99857a9d23b35cc2a37d5c90deaf20",
        "warmup_time": -1
    },
    "mpas_ocean.CheckNorm.time_check_norm": {
        "code": "class CheckNorm:\n    def time_check_norm(self, resolution):\n        from uxarray.grid.validation import _check_normalization\n        _check_normalization(self.uxgrid)\n\n    def setup(self, resolution):\n        self.uxgrid = ux.open_grid(file_path_dict[resolution][0])",
        "min_run_count": 2,
        "name": "mpas_ocean.CheckNorm.time_check_norm",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "80690bc549b4d4d30b9190960e39e99a70d987dd80b2fe9655f568b292f50f7c",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity": {
        "code": "class ConnectivityConstruction:\n    def time_face_face_connectivity(self, resolution):\n        ux.grid.connectivity._populate_face_face_connectivity(self.uxds.uxgrid)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0e86f4796f5762f3d54fbc03de55c71678cd10713a9d855732c8d7f6271fb5d9",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face": {
        "code": "class ConnectivityConstruction:\n    def time_n_nodes_per_face(self, resolution):\n        self.uxds.uxgrid.n_nodes_per_face\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "048a954b109fd388237d52a513b83fdb053c87fe5b04e39e2b0ed22db26ac7cc",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_ball_tree": {
        "code": "class ConstructTreeStructures:\n    def time_ball_tree(self, resolution):\n        self.uxds.uxgrid.get_ball_tree()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_ball_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e6c12f881e09c7410a76b884d48cbd5cfed69c7b1ac45f0a912c25e683644eec",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_kd_tree": {
        "code": "class ConstructTreeStructures:\n    def time_kd_tree(self, resolution):\n        self.uxds.uxgrid.get_kd_tree()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_kd_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5cb806e87ae96ad594fa332873c00f308209beb043243fad87db127a6f58d0d2",
        "warmup_time": -1
    },
    "mpas_ocean.GeoDataFrame.time_to_geodataframe": {
        "code": "class GeoDataFrame:\n    def time_to_geodataframe(self, resolution, exclude_antimeridian):\n        self.uxds[data_var].to_geodataframe(exclude_antimeridian=exclude_antimeridian)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.GeoDataFrame.time_to_geodataframe",
        "number": 0,
        "param_names": [
            "resolution",
            "exclude_antimeridian"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "True",
                "False"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5ae84430963547882e3ca35285f39b2c73c17832f240321838d046fe481aff0a",
        "warmup_time": -1
    },
    "mpas_ocean.Gradient.peakmem_gradient": {
        "code": "class Gradient:\n    def peakmem_gradient(self, resolution):\n        grad = self.uxds[data_var].gradient()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Gradient.peakmem_gradient",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ec24e9b4704c46d7ab04c978ae9b9d24c2e8ef6e77498414f29ec74ca6e8a34d"
    },
    "mpas_ocean.Gradient.time_gradient": {
        "code": "class Gradient:\n    def time_gradient(self, resolution):\n        self.uxds[data_var].gradient()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Gradient.time_gradient",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a6a46ac79f2cff8797ec9dc46acbbdf483ada08ae6701d6631d0382b0051c35d",
        "warmup_time": -1
    },
    "mpas_ocean.HoleEdgeIndices.time_construct_hole_edge_indices": {
        "code": "class HoleEdgeIndices:\n    def time_construct_hole_edge_indices(self, resolution):\n        ux.grid.geometry._construct_hole_edge_indices(self.uxds.uxgrid.edge_face_connectivity)\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.HoleEdgeIndices.time_construct_hole_edge_indices",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "40d01110d8192eb24b3d3c7ce52f74afbaa2f8efd645eb650339db1cbfe9e4f9",
        "warmup_time": -1
    },
    "mpas_ocean.Integrate.peakmem_integrate": {
        "code": "class Integrate:\n    def peakmem_integrate(self, resolution):\n        integral = self.uxds[data_var].integrate()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Integrate.peakmem_integrate",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "c0f563e9fa258207351e560866f616dcbd6c00d73cba40377a8cdfcde2ecfd24"
    },
    "mpas_ocean.Integrate.time_integrate": {
        "code": "class Integrate:\n    def time_integrate(self, resolution):\n        self.uxds[data_var].integrate()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Integrate.time_integrate",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "602926f39f66a5fee325785baf58dba3ae5cad8c95697670b119457ddcdb2461",
        "warmup_time": -1
    },
    "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection": {
        "code": "class MatplotlibConversion:\n    def time_dataarray_to_polycollection(self, resolution, periodic_elements):\n        self.uxds[data_var].to_polycollection()\n\nclass DatasetBenchmark:\n    def setup(self, resolution, *args, **kwargs):\n    \n    \n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection",
        "number": 0,
        "param_names": [
            "resolution",
            "periodic_elements"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "'include'",
                "'exclude'",
                "'split'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f8d69840e549a19644389544b092a40b8b32f29d28a21fc1c35c2fe6578a5977",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapDownsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "35146054f62256ab927954781012aad8a15b03eef90a4aece78bf2b7002c4853",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping": {
        "code": "class RemapDownsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3454ce734208221027c7080a56f1e679ae092a93516752a89474d75d7a705472",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapUpsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0836cc8c471952d8a557cf8d6c1d3c0677d0193d4ad961126f0bd34dab5dd9b9",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping": {
        "code": "class RemapUpsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "db94cc8878dce6417e0aa06f72be38042115986e62fe929389fb2b48d8c93582",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.peakmem_open_dataset": {
        "code": "class QuadHexagon:\n    def peakmem_open_dataset(self):\n        \"\"\"Peak memory usage of a `UxDataset`\"\"\"\n        uxds = ux.open_dataset(grid_path, data_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_dataset",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ad0aeefdf056572ee11796d0103ffa9a88e7bf04c8f9c3725d6c2d890fa188f0"
    },
    "quad_hexagon.QuadHexagon.peakmem_open_grid": {
        "code": "class QuadHexagon:\n    def peakmem_open_grid(self):\n        \"\"\"Peak memory usage of a `Grid`\"\"\"\n        uxgrid = ux.open_grid(grid_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_grid",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0d8b965012ecb7916a2b6ca64acae11befae73b3890c5e1ed06f092e9cb0def0"
    },
    "quad_hexagon.QuadHexagon.time_open_dataset": {
        "code": "class QuadHexagon:\n    def time_open_dataset(self):\n        \"\"\"Time to open a `UxDataset`\"\"\"\n        ux.open_dataset(grid_path, data_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_dataset",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "04f0374471175756c99c2792d638ac40872fdbe2301368ec39fd096f4195fa9a",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.time_open_grid": {
        "code": "class QuadHexagon:\n    def time_open_grid(self):\n        \"\"\"Time to open a `Grid`\"\"\"\n        ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "23b984b5aa811d5e0d05013c8e071d46285a6908fa146376bc3ca71591fa251a",
        "warmup_time": -1
    },
    "version": 2
}