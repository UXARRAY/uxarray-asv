{
    "face_bounds.FaceBounds.peakmem_face_bounds": {
        "code": "class FaceBounds:\n    def peakmem_face_bounds(self, grid_path):\n        \"\"\"Peak memory usage obtain ``Grid.face_bounds.\"\"\"\n        face_bounds = self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "name": "face_bounds.FaceBounds.peakmem_face_bounds",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "264d64f2871bf9cf43d671ee77406801857632dd9da3cdd4302188c9f73740e4"
    },
    "face_bounds.FaceBounds.time_face_bounds": {
        "code": "class FaceBounds:\n    def time_face_bounds(self, grid_path):\n        \"\"\"Time to obtain ``Grid.face_bounds``\"\"\"\n        self.uxgrid.bounds\n\n    def setup(self, grid_path):\n        self.uxgrid = ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "face_bounds.FaceBounds.time_face_bounds",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/quad-hexagon/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/ugrid/geoflow-small/grid.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/scrip/outCSne8/outCSne8.nc')",
                "PosixPath('/home/runner/work/uxarray/uxarray/test/meshfiles/mpas/QU/oQU480.231010.nc')"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "59ab137a0d4a031edd79f08b2454bef8eeb9cd8ef799f72e5272f249063ec61d",
        "warmup_time": -1
    },
    "import.Imports.timeraw_import_uxarray": {
        "code": "class Imports:\n    def timeraw_import_uxarray(self):\n        return \"import uxarray\"",
        "min_run_count": 2,
        "name": "import.Imports.timeraw_import_uxarray",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "05d7358a621ba8469294e43469945f02cd99857a9d23b35cc2a37d5c90deaf20",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity": {
        "code": "class ConnectivityConstruction:\n    def time_face_face_connectivity(self, resolution):\n        ux.grid.connectivity._populate_face_face_connectivity(self.uxds.uxgrid)\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_face_face_connectivity",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ae27a3df82c890aa93df87fc5f67ba8e0c4b51f85da767fac702be7ef05bfa92",
        "warmup_time": -1
    },
    "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face": {
        "code": "class ConnectivityConstruction:\n    def time_n_nodes_per_face(self, resolution):\n        self.uxds.uxgrid.n_nodes_per_face\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConnectivityConstruction.time_n_nodes_per_face",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dad5686c3187a018e28621fd2e0ce788e613f508ba3cf7e3cc8136d2423c5fbf",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_ball_tree": {
        "code": "class ConstructTreeStructures:\n    def time_ball_tree(self, resolution):\n        self.uxds.uxgrid.get_ball_tree()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_ball_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f1f3fea03a00052ef8c3e75069560761700a091dce616cf32ab1503dfd1cd0b9",
        "warmup_time": -1
    },
    "mpas_ocean.ConstructTreeStructures.time_kd_tree": {
        "code": "class ConstructTreeStructures:\n    def time_kd_tree(self, resolution):\n        self.uxds.uxgrid.get_kd_tree()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.ConstructTreeStructures.time_kd_tree",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fc440c582485de0d25b1bbb1e0450bedd0c0c0ebd7b64c4c51022871f790a932",
        "warmup_time": -1
    },
    "mpas_ocean.GeoDataFrame.peakmem_to_geodataframe": {
        "code": "class GeoDataFrame:\n    def peakmem_to_geodataframe(self, resolution, exclude_antimeridian):\n        gdf = self.uxds[data_var].to_geodataframe(exclude_antimeridian=exclude_antimeridian)\n\n    def setup(self, resolution, exclude_antimeridian):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.GeoDataFrame.peakmem_to_geodataframe",
        "param_names": [
            "resolution",
            "exclude_antimeridian"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "True",
                "False"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "aabe445c29aa2068658af57e83dbb13650b81fab0ac0021b7d4d7a6cc255fe82"
    },
    "mpas_ocean.GeoDataFrame.time_to_geodataframe": {
        "code": "class GeoDataFrame:\n    def time_to_geodataframe(self, resolution, exclude_antimeridian):\n        self.uxds[data_var].to_geodataframe(exclude_antimeridian=exclude_antimeridian)\n\n    def setup(self, resolution, exclude_antimeridian):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.GeoDataFrame.time_to_geodataframe",
        "number": 0,
        "param_names": [
            "resolution",
            "exclude_antimeridian"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "True",
                "False"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8fd59dc804740e6ef225af4f52e8814cc380df3ae27baa7bdaf24b6833ac5214",
        "warmup_time": -1
    },
    "mpas_ocean.Gradient.peakmem_gradient": {
        "code": "class Gradient:\n    def peakmem_gradient(self, resolution):\n        grad = self.uxds[data_var].gradient()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Gradient.peakmem_gradient",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "d30be97e0fbab7963b25f9549426e13d76cf4305fdf9e21af66690feffc07612"
    },
    "mpas_ocean.Gradient.time_gradient": {
        "code": "class Gradient:\n    def time_gradient(self, resolution):\n        self.uxds[data_var].gradient()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Gradient.time_gradient",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "505e2bee0d40c2459579062763518d05d422328f5e6a4955815f8163789dc86e",
        "warmup_time": -1
    },
    "mpas_ocean.Integrate.peakmem_integrate": {
        "code": "class Integrate:\n    def peakmem_integrate(self, resolution):\n        integral = self.uxds[data_var].integrate()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "name": "mpas_ocean.Integrate.peakmem_integrate",
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a1d2ab08020dfa02c63a017687b71268bb9ab501a2913e114478d53808e75297"
    },
    "mpas_ocean.Integrate.time_integrate": {
        "code": "class Integrate:\n    def time_integrate(self, resolution):\n        self.uxds[data_var].integrate()\n\n    def setup(self, resolution):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.Integrate.time_integrate",
        "number": 0,
        "param_names": [
            "resolution"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4884ecd1a6d03e961f2ac877955cd44cbd952b85df5df47398dc92317dfe65a3",
        "warmup_time": -1
    },
    "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection": {
        "code": "class MatplotlibConversion:\n    def time_dataarray_to_polycollection(self, resolution, periodic_elements):\n        self.uxds[data_var].to_polycollection()\n\n    def setup(self, resolution, periodic_elements):\n        self.uxds = ux.open_dataset(file_path_dict[resolution][0], file_path_dict[resolution][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.MatplotlibConversion.time_dataarray_to_polycollection",
        "number": 0,
        "param_names": [
            "resolution",
            "periodic_elements"
        ],
        "params": [
            [
                "'480km'",
                "'120km'"
            ],
            [
                "'include'",
                "'exclude'",
                "'split'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "26e4314dabc51bab6febda69c8d170ce4502991ee109dbf89fde2f038c3a678c",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapDownsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "35146054f62256ab927954781012aad8a15b03eef90a4aece78bf2b7002c4853",
        "warmup_time": -1
    },
    "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping": {
        "code": "class RemapDownsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_120[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_480.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapDownsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3454ce734208221027c7080a56f1e679ae092a93516752a89474d75d7a705472",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping": {
        "code": "class RemapUpsample:\n    def time_inverse_distance_weighted_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.inverse_distance_weighted(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_inverse_distance_weighted_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0836cc8c471952d8a557cf8d6c1d3c0677d0193d4ad961126f0bd34dab5dd9b9",
        "warmup_time": -1
    },
    "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping": {
        "code": "class RemapUpsample:\n    def time_nearest_neighbor_remapping(self):\n        self.uxds_480[\"bottomDepth\"].remap.nearest_neighbor(self.uxds_120.uxgrid)\n\n    def setup(self):\n        self.uxds_120 = ux.open_dataset(file_path_dict['120km'][0], file_path_dict['120km'][1])\n        self.uxds_480 = ux.open_dataset(file_path_dict['480km'][0], file_path_dict['480km'][1])",
        "min_run_count": 2,
        "name": "mpas_ocean.RemapUpsample.time_nearest_neighbor_remapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "db94cc8878dce6417e0aa06f72be38042115986e62fe929389fb2b48d8c93582",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.peakmem_open_dataset": {
        "code": "class QuadHexagon:\n    def peakmem_open_dataset(self):\n        \"\"\"Peak memory usage of a `UxDataset`\"\"\"\n        uxds = ux.open_dataset(grid_path, data_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_dataset",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ad0aeefdf056572ee11796d0103ffa9a88e7bf04c8f9c3725d6c2d890fa188f0"
    },
    "quad_hexagon.QuadHexagon.peakmem_open_grid": {
        "code": "class QuadHexagon:\n    def peakmem_open_grid(self):\n        \"\"\"Peak memory usage of a `Grid`\"\"\"\n        uxgrid = ux.open_grid(grid_path)",
        "name": "quad_hexagon.QuadHexagon.peakmem_open_grid",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0d8b965012ecb7916a2b6ca64acae11befae73b3890c5e1ed06f092e9cb0def0"
    },
    "quad_hexagon.QuadHexagon.time_open_dataset": {
        "code": "class QuadHexagon:\n    def time_open_dataset(self):\n        \"\"\"Time to open a `UxDataset`\"\"\"\n        ux.open_dataset(grid_path, data_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_dataset",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "04f0374471175756c99c2792d638ac40872fdbe2301368ec39fd096f4195fa9a",
        "warmup_time": -1
    },
    "quad_hexagon.QuadHexagon.time_open_grid": {
        "code": "class QuadHexagon:\n    def time_open_grid(self):\n        \"\"\"Time to open a `Grid`\"\"\"\n        ux.open_grid(grid_path)",
        "min_run_count": 2,
        "name": "quad_hexagon.QuadHexagon.time_open_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "23b984b5aa811d5e0d05013c8e071d46285a6908fa146376bc3ca71591fa251a",
        "warmup_time": -1
    },
    "version": 2
}